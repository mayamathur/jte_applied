"ICC",
"cfdecomp",
"tidyr",
"tibble",
"testthat",
"rstan", # note: to reinstall this one, need to use high-mem session
"optimx",
"weightr",
"phacking",
"here",
"stringr",
"bayesmeta",
"rma.exact")
# to install everything
# lapply(toLoad, install.packages)
lapply( toLoad,
require,
character.only = TRUE)
# prevent masking
select = dplyr::select
# run this only if you want to update the R environment specs
# setwd(here())
# renv::snapshot()
# ~~ User-specified global vars -------------------------
# no sci notation
options(scipen=999)
# control which results should be redone and/or overwritten
# but note that not all fns respect this setting
overwrite.res = TRUE
# should analyses be run from scratch?
# FALSE if just redoing plots
rerun.analyses = TRUE
# ~~ Set directories -------------------------
# need helper fns from simulation study
( code.dir = str_replace( string = here(),
pattern = "Applied example",
replacement = "Simulation study/Code \\(git\\)") )
# test it
setwd(code.dir)
data.dir = here()
results.dir = here("Results from R")
# check that they're specified correctly
setwd(data.dir)
setwd(results.dir)
# below are the only absolute paths
# write results directly to directory containing TeX manuscript in Overleaf so stats can be piped directly into text
# this is an absolute path because it must live in Dropbox, outside the project directory, in order to sync with Overleaf
# to reproduce results, just set this to any directory on your local machine
# results will be written to a csv file in that location
overleaf.dir.figs = "/Users/mmathur/Dropbox/Apps/Overleaf/JTE (Jeffreys tau estimation) Overleaf/R_objects/figures"
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/JTE (Jeffreys tau estimation) Overleaf/R_objects"
setwd(code.dir)
source("analyze_sims_helper_JTE.R")
source("helper_JTE.R")  # for lprior(), etc.
# READ PREPPED DATA ----------------------------------------------------
setwd(data.dir)
d = fread("data_zito.csv")
setwd(results.dir)
rsp = fread("zito_forest_results.csv")
names(rsp)
# set y-axis order
unique(rsp$group)
correct.order = c( "CV death and myocardial infarction (k = 2)",
"All-cause death (k = 3)",
"Myocardial infarction (k = 2)",
"Index ICA (k = 4)",
"Index revascularization (k = 4)",
"Downstream testing (k = 4)")
rsp$group = factor( rsp$group, levels = rev(correct.order) )
levels(rsp$group)
# reorder methods
correct.order = c("DL-HKSJ", "REML-HKSJ", "Exact", "Jeffreys1-shortest", "Jeffreys2-shortest")
rsp$method = factor(rsp$method.pretty, levels = correct.order)
levels(rsp$method)
# same colors as in analyze_sims_helper.R for prettiness
.colors = c("#246105",
"black",
"#CC9808",
"#E075DB",
"#F2340E")
unique(rsp$method)
rsp$SLo
# rename methods
rsp$method.pretty.tau = rsp$method
rsp$method.pretty.tau[ rsp$method.pretty.tau == "DL-HKSJ" ] = "DL-Qprofile"
rsp$method.pretty.tau[ rsp$method.pretty.tau == "REML-HKSJ" ] = "REML-Qprofile"
# reorder methods
correct.order = c("DL-Qprofile", "REML-Qprofile", "Exact", "Jeffreys1-shortest", "Jeffreys2-shortest")
rsp$method.pretty.tau = factor(rsp$method.pretty.tau, levels = correct.order)
levels(rsp$method.pretty.tau)
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = exp(MHi),
xmin = exp(MLo)),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( "Pooled risk ratio with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
# find good x-axis limits
summary( rsp$SLo )
summary( rsp$SHi )
xmin = 0
xmax = 12
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = exp(MHi),
xmin = exp(MLo)),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( "Pooled risk ratio with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
View(rsp)
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = SHi,
xmin = SLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( "Pooled risk ratio with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = SHi,
xmin = SLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( bquote(bold(hat(tau)) )) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
# reorder methods
correct.order = c("DL-Qprofile", "REML-Qprofile", "Jeffreys1-shortest", "Jeffreys2-shortest")
# rename methods
rsp$method.pretty.tau = rsp$method
rsp$method.pretty.tau[ rsp$method.pretty.tau == "DL-HKSJ" ] = "DL-Qprofile"
rsp$method.pretty.tau[ rsp$method.pretty.tau == "REML-HKSJ" ] = "REML-Qprofile"
# reorder methods
correct.order = c("DL-Qprofile", "REML-Qprofile", "Jeffreys1-shortest", "Jeffreys2-shortest")
rsp = rsp %>% filter(method.pretty.tau %in% correct.order)
rsp$method.pretty.tau = factor(rsp$method.pretty.tau, levels = correct.order)
levels(rsp$method.pretty.tau)
# same colors as in analyze_sims_helper.R for prettiness
.colors = c("#246105",
"black",
#"#CC9808",
"#E075DB",
"#F2340E")
# find good x-axis limits
summary( rsp$SLo )
summary( rsp$SHi )
xmin = 0
xmax = 12
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = SHi,
xmin = SLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( bquote(bold(hat(tau)) )) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
# rename methods
rsp$method.pretty.tau = rsp$method
rsp$method.pretty.tau[ rsp$method.pretty.tau == "DL-HKSJ" ] = "DL-Qprofile"
rsp$method.pretty.tau[ rsp$method.pretty.tau == "REML-HKSJ" ] = "REML-Qprofile"
# reorder methods
correct.order = c("DL-Qprofile", "REML-Qprofile", "Jeffreys1-shortest", "Jeffreys2-shortest")
table(rsp$method.pretty.tau)
table(rsp$method)
names(rsp)
# rename methods
rsp$method.pretty.tau = rsp$method.pretty
rsp$method.pretty.tau[ rsp$method.pretty.tau == "DL-HKSJ" ] = "DL-Qprofile"
rsp$method.pretty.tau[ rsp$method.pretty.tau == "REML-HKSJ" ] = "REML-Qprofile"
table(rsp$method.pretty.tau)
table(rsp$method.pretty)
setwd(results.dir)
rsp = fread("zito_forest_results.csv")
table(rsp$method.pretty)
# rename methods
rsp$method.pretty.tau = rsp$method.pretty
rsp$method.pretty.tau[ rsp$method.pretty.tau == "DL-HKSJ" ] = "DL-Qprofile"
rsp$method.pretty.tau[ rsp$method.pretty.tau == "REML-HKSJ" ] = "REML-Qprofile"
table(rsp$method.pretty.tau)
# reorder methods
correct.order = c("DL-Qprofile", "REML-Qprofile", "Jeffreys1-shortest", "Jeffreys2-shortest")
rsp = rsp %>% filter(method.pretty.tau %in% correct.order)
rsp$method.pretty.tau = factor(rsp$method.pretty.tau, levels = correct.order)
levels(rsp$method.pretty.tau)
.colors = c("#246105",
"black",
#"#CC9808",
"#E075DB",
"#F2340E")
# find good x-axis limits
summary( rsp$SLo )
summary( rsp$SHi )
xmin = 0
xmax = 12
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = SHi,
xmin = SLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( bquote(bold(hat(tau)) )) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
levels(rsp$method.pretty.tau)
table(rsp$method.pretty.tau)
p
# rename methods
rsp$method.pretty.tau = rsp$method.pretty
rsp$method.pretty.tau[ rsp$method.pretty.tau == "DL-HKSJ" ] = "DL-Qprofile"
rsp$method.pretty.tau[ rsp$method.pretty.tau == "REML-HKSJ" ] = "REML-Qprofile"
table(rsp$method.pretty.tau)
# reorder methods
correct.order = c("DL-Qprofile", "REML-Qprofile", "Jeffreys1-shortest", "Jeffreys2-shortest")
rsp = rsp %>% filter(method.pretty.tau %in% correct.order)
rsp$method.pretty.tau = factor(rsp$method.pretty.tau, levels = correct.order)
levels(rsp$method.pretty.tau)
# same colors as in analyze_sims_helper.R for prettiness
.colors = c("#246105",
"black",
#"#CC9808",
"#E075DB",
"#F2340E")
# find good x-axis limits
summary( rsp$SLo )
summary( rsp$SHi )
xmin = 0
xmax = 12
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method.pretty.) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = SHi,
xmin = SLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( bquote(bold(hat(tau)) )) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method.pretty.tau) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = SHi,
xmin = SLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( bquote(bold(hat(tau)) )) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
p = ggplot( data = rsp,
aes( y = group,
x = Shat,
xmin = SLo,
xmax = SHi,
color = method.pretty.tau) ) +
# reference line at null
geom_vline(xintercept = 1,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = SHi,
xmin = SLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Outcome" ) +
# scale_x_continuous( limits = c(xmin, xmax),
#                     breaks = seq(xmin, xmax, 0.05) ) +
# scale_x_log10(breaks = seq(0.1, 10, 1)) +
# coord_cartesian( xlim = c(0.1, 10)) +
coord_cartesian( xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
xlab( bquote( bold( hat(tau) ~ "with 95% CI (log-RR scale)") ) ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=16),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
exp(5)
v
my_ggsave(name = "zito_forest_tau.pdf",
.plot = p,
.width = 13,
.height = 10,
.results.dir = results.dir,
.overleaf.dir = overleaf.dir.figs)
View(rsp)
