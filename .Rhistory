"TST; late follow-up (k = 4)",
"SE%; posttreatment (k = 17)",
"SE%; early follow-up (k = 5)",
"SE%; late follow-up (k = 4)" )
rsp$group = factor( rsp$group, levels = rev(correct.order) )
levels(rsp$group)
.colors = c("blue", "orange", "black")
p = ggplot( data = rsp,
aes( x = group,
y = Mhat,
ymin = MLo,
ymax = MHi,
color = method) ) +
# reference line at null
geom_hline(yintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbar( aes(ymax = MHi,
ymin = MLo),
width = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors ) +
scale_x_discrete( name = "Subset" ) +
#scale_y_continuous(name="Odds ratio", limits = c(0.5, 5)) +
coord_flip() +
ylab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw() +
theme( text = element_text(face = "bold"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "bottom" )
p
# reorder methods
correct.order = c("DL", "REML", "Jeffreys")
rsp$method = factor(rsp$method, levels = correct.order)
levels(rsp$method)
.colors = c("blue", "black", "red")
p = ggplot( data = rsp,
aes( x = group,
y = Mhat,
ymin = MLo,
ymax = MHi,
color = method) ) +
# reference line at null
geom_hline(yintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbar( aes(ymax = MHi,
ymin = MLo),
width = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors ) +
scale_x_discrete( name = "Subset" ) +
#scale_y_continuous(name="Odds ratio", limits = c(0.5, 5)) +
coord_flip() +
ylab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw() +
theme( text = element_text(face = "bold"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "bottom" )
p
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(height = 0.5) ) +
geom_point(size=3,
position=position_dodge(height = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors ) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw() +
theme( text = element_text(face = "bold"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors ) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw() +
theme( text = element_text(face = "bold"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
levels(rsp$method)
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw() +
theme( text = element_text(face = "bold"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
max(rsp$MHi)
# find good x-axis limits
min(rsp$MLo)
# find good x-axis limits
min(rsp$MLo)
max(rsp$MHi)
xmin = -100
xmax = 80
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
scale_x_continuous( limits = c(xmin, xmax),
breaks = seq(xmin, xmax, 20) ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
xmin = -102
xmax = 82
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
scale_x_continuous( limits = c(xmin, xmax),
breaks = seq(xmin, xmax, 20) ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
# find good x-axis limits
min(rsp$MLo)
max(rsp$MHi)
xmin = -100
xmax = 80
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
scale_x_continuous( limits = c(xmin - 2, xmax + 2),
breaks = seq(xmin, xmax, 20) ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
my_ggsave(name = "insomnia_forest.pdf",
.plot = p,
.width = 10,
.height = 13,
.results.dir = results.dir,
.overleaf.dir = overleaf.dir.figs)
.colors = c("#0E96F0",
"#0F5A8C",
"#F2340E")
# find good x-axis limits
min(rsp$MLo)
max(rsp$MHi)
xmin = -100
xmax = 80
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
scale_x_continuous( limits = c(xmin - 2, xmax + 2),
breaks = seq(xmin, xmax, 20) ) +
xlab( "Pooled estimate with 95% CI (minutes)" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
my_ggsave(name = "insomnia_forest.pdf",
.plot = p,
.width = 10,
.height = 13,
.results.dir = results.dir,
.overleaf.dir = overleaf.dir.figs)
p = ggplot( data = rsp,
aes( y = group,
x = Mhat,
xmin = MLo,
xmax = MHi,
color = method) ) +
# reference line at null
geom_vline(xintercept = 0,
lwd = .8,
color = "gray") +
geom_errorbarh( aes(xmax = MHi,
xmin = MLo),
height = 0,
lwd = 0.8,
position = position_dodge(width = 0.5) ) +
geom_point(size=3,
position=position_dodge(width = 0.5) ) +
# manually provided colors
scale_colour_manual(values = .colors,
guide = guide_legend(reverse = TRUE)) +
scale_y_discrete( name = "Study subset (outcome; follow-up duration)" ) +
scale_x_continuous( limits = c(xmin - 2, xmax + 2),
breaks = seq(xmin, xmax, 20) ) +
xlab( "Pooled estimate with 95% CI" ) +
labs(color  = "Method") +
theme_bw(base_size = 16) +
theme( text = element_text(face = "bold"),
axis.title = element_text(size=20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom" )
p
my_ggsave(name = "insomnia_forest.pdf",
.plot = p,
.width = 10,
.height = 13,
.results.dir = results.dir,
.overleaf.dir = overleaf.dir.figs)
names(rsp)
# ratio of CI width of Jeffreys vs. REML
rsp = rsp %>% group_by(group) %>%
mutate( MhatWidth = MHi - MLo,
CI_ratio = MhatWidth[ method == "REML" ] / MhatWidth[ method == "Jeffreys" ] )
View(rsp)
# ratio of CI width of Jeffreys vs. REML
rsp = rsp %>% group_by(group) %>%
mutate( MhatWidth = MHi - MLo,
CI_ratio = min( MhatWidth[ method != "Jeffreys" ] ) / MhatWidth[ method == "Jeffreys" ] )
mean(rsp$CI_ratio)
100 * ( 1 - mean(rsp$CI_ratio) )
100 * ( mean(rsp$CI_ratio) - 1 )
round( 100 * ( mean(rsp$CI_ratio) - 1 ) )
# Your string
input_string <- "(k = 16)"
# Extract the number using regular expression
extracted_number <- str_extract(input_string, "\\d+")
# Convert the extracted number to numeric
result <- as.numeric(extracted_number)
# Print the result
print(result)
input_string <- "asdfasdf ; (k = 16)"
extracted_number <- str_extract(input_string, "\\d+")
# Convert the extracted number to numeric
result <- as.numeric(extracted_number)
# Print the result
print(result)
as.numeric( str_extract(rsp$group, "\\d+") )
# ratio of CI width of Jeffreys vs. the winner among the other two methods
rsp = rsp %>% group_by(group) %>%
mutate( MhatWidth = MHi - MLo,
MhatTestReject = sign(MHi) == sign(MLo),
CI_ratio = min( MhatWidth[ method != "Jeffreys" ] ) / MhatWidth[ method == "Jeffreys" ],
OnlyJeffreysRejects = MhatTestReject[ method != "Jeffreys" ] == 0 &
MhatTestReject[ method == "Jeffreys" ] == 1)
# ratio of CI width of Jeffreys vs. the winner among the other two methods
rsp = rsp %>% group_by(group) %>%
mutate( MhatWidth = MHi - MLo,
MhatTestReject = sign(MHi) == sign(MLo),
CI_ratio = min( MhatWidth[ method != "Jeffreys" ] ) / MhatWidth[ method == "Jeffreys" ] )
View(rsp)
View(rsp %>% select(method, Mhat, MLo, MHi, MhatTestReject, CI_ratio))
rsp = rs %>% filter(method %in% c("REML", "DL", "Jeffreys") )
# ratio of CI width of Jeffreys vs. the winner among the other two methods
rsp = rsp %>% group_by(group) %>%
mutate( MhatWidth = MHi - MLo,
MhatTestReject = sign(MHi) == sign(MLo),
CI_ratio = min( MhatWidth[ method != "Jeffreys" ] ) / MhatWidth[ method == "Jeffreys" ],
OnlyJeffreysRejects = MhatTestReject[ method != "Jeffreys" ] == 0 &
MhatTestReject[ method == "Jeffreys" ] == 1)
rsp = rs %>% filter(method %in% c("REML", "DL", "Jeffreys") )
# ratio of CI width of Jeffreys vs. the winner among the other two methods
rsp = rsp %>% mutate( MhatWidth = MHi - MLo,
MhatTestReject = sign(MHi) == sign(MLo),
CI_ratio = min( MhatWidth[ method != "Jeffreys" ] ) / MhatWidth[ method == "Jeffreys" ] )
rsp = rsp %>% group_by(group) %>%
mutate( MhatWidth = MHi - MLo,
MhatTestReject = sign(MHi) == sign(MLo),
CI_ratio = min( MhatWidth[ method != "Jeffreys" ] ) / MhatWidth[ method == "Jeffreys" ] )
# extract k, which is the numeric part of the group variable
rsp$k = as.numeric( str_extract(rsp$group, "\\d+") )
setwd(results.dir)
fwrite(rsp, "insomnia_forest_results.csv")
update_result_csv( name = "Mean perc narrower Jeffreys vs winning other method",
value = round( 100 * ( mean(rsp$CI_ratio) - 1 ) ),
print = TRUE )
update_result_csv( name = "Mean perc narrower Jeffreys vs winning other method - small metas",
value = round( 100 * ( mean(rsp$CI_ratio[ rsp$k <= 5] ) - 1 ) ),
print = TRUE )
update_result_csv( name = "Mean perc narrower Jeffreys vs winning other method - larger metas",
value = round( 100 * ( mean(rsp$CI_ratio[ rsp$k > 5] ) - 1 ) ),
print = TRUE )
rsp$CI_ratio[ rsp$k > 5]
update_result_csv( name = "Mean perc wider Jeffreys vs winning other method - larger metas",
value = round( 100 * ( mean( 1/ rsp$CI_ratio[ rsp$k > 5] ) - 1 ) ),
print = TRUE )
# MhatTestReject comparisons
update_result_csv( name = "Mean MhatTestReject Jeffreys",
value = round( 100 * mean(rsp$MhatTestReject[ method == "Jeffreys"] ) ) ),
# MhatTestReject comparisons
update_result_csv( name = "Mean MhatTestReject Jeffreys",
value = round( 100 * mean( rsp$MhatTestReject[ method == "Jeffreys"] ) ),
print = TRUE )
# MhatTestReject comparisons
update_result_csv( name = "Mean MhatTestReject Jeffreys",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "Jeffreys"] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject REML",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "REML"] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject REML",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "DL"] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject REML",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "REML"] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject DL",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "DL"] ) ),
print = TRUE )
nrow(d)
mean(c(16,14,16,17))
# MhatTestReject comparisons
update_result_csv( name = "Mean MhatTestReject Jeffreys",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "Jeffreys"] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject Jeffreys - small metas",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "Jeffreys" & rsp$k <= 5] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject REML - small metas",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "REML" & rsp$k <= 5] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject DL - larger metas",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "DL"& rsp$k <= 5] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject Jeffreys - larger metas",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "Jeffreys" & rsp$k > 5] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject REML - larger metas",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "REML" & rsp$k > 5] ) ),
print = TRUE )
update_result_csv( name = "Mean MhatTestReject DL - larger metas",
value = round( 100 * mean( rsp$MhatTestReject[ rsp$method == "DL"& rsp$k > 5] ) ),
print = TRUE )
